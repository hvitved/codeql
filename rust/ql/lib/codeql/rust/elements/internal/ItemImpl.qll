// generated by codegen, remove this comment if you wish to edit this file
/**
 * This module provides a hand-modifiable wrapper around the generated class `Item`.
 *
 * INTERNAL: Do not use.
 */

private import codeql.rust.elements.internal.generated.Item

/**
 * INTERNAL: This module contains the customizable definition of `Item` and should not
 * be referenced directly.
 */
module Impl {
  /**
   * A Item. For example:
   * ```rust
   * todo!()
   * ```
   */
  class Item extends Generated::Item { }

  private import rust
  private import codeql.rust.elements.internal.generated.ParentChild

  pragma[nomagic]
  private Element getItemAncestor(Item item) {
    result = getImmediateParent(item)
    or
    exists(Element mid |
      mid = getItemAncestor(item) and
      result = getImmediateParent(mid) and
      not mid instanceof Item
    )
  }

  pragma[nomagic]
  private Item getImmediateParentItem(Item item) { result = getItemAncestor(item) }

  /** A crate. */
  class Crate extends File {
    Crate() { this.getBaseName() = "Cargo.toml" }

    pragma[nomagic]
    Item getItem() {
      exists(SourceFile file |
        file.getFile().getParentContainer() = this.getParentContainer() and
        file.getAnItem() = result
      )
    }
  }
}
