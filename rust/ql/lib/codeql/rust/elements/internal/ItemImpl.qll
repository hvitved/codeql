// generated by codegen, remove this comment if you wish to edit this file
/**
 * This module provides a hand-modifiable wrapper around the generated class `Item`.
 *
 * INTERNAL: Do not use.
 */

private import codeql.rust.elements.internal.generated.Item

/**
 * INTERNAL: This module contains the customizable definition of `Item` and should not
 * be referenced directly.
 */
module Impl {
  /**
   * A Item. For example:
   * ```rust
   * todo!()
   * ```
   */
  class Item extends Generated::Item { }

  private import rust
  private import codeql.rust.elements.internal.generated.ParentChild

  private class NamedItem extends Item {
    private string name;

    NamedItem() {
      name = this.(Const).getName().getText()
      or
      name = this.(Enum).getName().getText()
      or
      name = this.(Function).getName().getText()
      or
      name = this.(Module).getName().getText()
      or
      name = this.(Struct).getName().getText()
      or
      name = this.(Trait).getName().getText()
      or
      name = this.(Union).getName().getText()
      or
      this instanceof Use and
      name = "(use)"
    }

    Visibility getVisibility() {
      result = this.(Const).getVisibility()
      or
      result = this.(Enum).getVisibility()
      or
      result = this.(Function).getVisibility()
      or
      result = this.(Module).getVisibility()
      or
      result = this.(Struct).getVisibility()
      or
      result = this.(Trait).getVisibility()
      or
      result = this.(Union).getVisibility()
      or
      result = this.(Use).getVisibility()
    }

    bindingset[this]
    pragma[inline_late]
    predicate isPublic() { exists(this.getVisibility()) }

    string getName() { result = name }
  }

  pragma[nomagic]
  private Element getAnItemDescendant(NamedItem item) {
    getImmediateParent(result) = item
    or
    exists(Element mid |
      mid = getAnItemDescendant(item) and
      getImmediateParent(result) = mid and
      not mid instanceof NamedItem
    )
  }

  pragma[nomagic]
  private NamedItem getImmediateParentItem(NamedItem item) { item = getAnItemDescendant(result) }

  private newtype TItemPath =
    TItemPathNil(SourceFile f) or
    TItemPathCons(NamedItem head, ItemPath tail) { itemCons(head, tail) }

  /** A path to an item, rooted at a source file. */
  abstract private class ItemPath extends TItemPath {
    abstract int length();

    abstract NamedItem getHead();

    abstract NamedItem getItem(int i);

    abstract ItemPath drop(int i);

    abstract string toString();

    abstract Location getLocation();
  }

  private class ItemPathNil extends ItemPath, TItemPathNil {
    private SourceFile source;

    ItemPathNil() { this = TItemPathNil(source) }

    private File getFile() { result = source.getFile() }

    override int length() { result = 0 }

    override NamedItem getHead() { none() }

    override NamedItem getItem(int i) { none() }

    override ItemPath drop(int i) { result = this and i = 0 }

    override string toString() { result = this.getFile().getRelativePath() }

    override Location getLocation() { result = source.getLocation() }
  }

  private class ItemPathCons extends ItemPath, TItemPathCons {
    private NamedItem head;
    private ItemPath tail;

    ItemPathCons() { this = TItemPathCons(head, tail) }

    override int length() { result = 1 + tail.length() }

    override NamedItem getHead() { result = head }

    override NamedItem getItem(int i) {
      result = tail.getItem(i)
      or
      result = head and i = tail.length()
    }

    override ItemPath drop(int i) {
      result = this and i = 0
      or
      result = tail.drop(i - 1) and i > 0
    }

    override string toString() { result = tail.toString() + "::" + head }

    override Location getLocation() { result = head.getLocation() }
  }

  private predicate topItem(NamedItem item, ItemPathNil nil) {
    exists(SourceFile file |
      item = file.getAnItem() and
      nil = TItemPathNil(file)
    )
  }

  private predicate itemCons(NamedItem head, ItemPath tail) {
    topItem(head, tail)
    or
    exists(NamedItem parent |
      parent = getImmediateParentItem(head) and
      tail = getAnItemPath(parent)
    )
    or
    fileImport(_, tail, head, _)
    or
    useImport(_, tail, head, _)
  }

  pragma[nomagic]
  ItemPath getAnItemPath(NamedItem i) {
    exists(ItemPath tail, SourceFile f |
      result = TItemPathCons(i, tail) and
      tail.drop(_) = TItemPathNil(f) and
      f.getFile() = i.getFile()
    )
  }

  /** Holds if `f` is available as `mod name;` inside `folder`. */
  private predicate fileModule(SourceFile f, string name, Folder folder) {
    exists(File file | file = f.getFile() |
      file.getBaseName() = name + ".rs" and
      folder = file.getParentContainer()
      or
      exists(Folder encl |
        file.getBaseName() = "mod.rs" and
        encl = file.getParentContainer() and
        name = encl.getBaseName() and
        folder = encl.getParentContainer()
      )
    )
  }

  /** Holds if `m` is a `mod name;` item importing file `f`. */
  private predicate fileImport(Module m, SourceFile f) {
    exists(string name |
      not m.hasItemList() and
      name = m.getName().getText() and
      fileModule(f, name, m.getFile().getParentContainer())
    )
  }

  /**
   * Holds if `mod` is a `mod name;` item resulting in the item path
   * `head::modPath` being valid. The new path is valid because
   * `filePath` is valid within the file that gets imported.
   */
  private predicate fileImport(Module mod, ItemPath modPath, NamedItem head, ItemPath filePath) {
    head.isPublic() and
    (
      exists(SourceFile f |
        fileImport(mod, f) and
        getAnItemPath(mod) = modPath and
        filePath = TItemPathCons(head, TItemPathNil(f))
      )
      or
      exists(ItemPath modPathTail, NamedItem modPathHead, ItemPath filePathTail |
        fileImport(mod, modPathTail, modPathHead, filePathTail) and
        modPath = TItemPathCons(modPathHead, modPathTail) and
        filePath = TItemPathCons(head, filePathTail)
      )
    )
  }

  private ItemPath getAnItemPath_(ItemPath ip) {
    result = ip
    or
    result = TItemPathCons(any(Use u), ip)
  }

  private ItemPath resolvePath(Path path) {
    exists(ItemPath enclPath |
      exists(NamedItem encl, NamedItem head |
        getAnItemDescendant(encl) = path and
        enclPath = getAnItemPath_(getAnItemPath(encl).drop(_)) and
        not exists(path.getQualifier()) and
        not path = any(UseTreeList list).getAUseTree().getPath() and // todo
        result = TItemPathCons(head, enclPath) and
        head.getName() = path.getPart().getNameRef().getText()
      )
    )
    or
    exists(ItemPath q, NamedItem head |
      q = resolvePath(path.getQualifier()) and
      result = TItemPathCons(head, getAnItemPath_(q)) and
      head.getName() = path.getPart().getNameRef().getText()
    )
  }

  Item resolveItem(Path path) { result = resolvePath(path).getHead() }

  /** Holds if `m` is a `mod name;` item importing file `f`. */
  pragma[nomagic]
  private predicate useImport(Use use, ItemPath usePath, NamedItem head, ItemPath usedPath) {
    // imported item must be `pub`
    head.isPublic() and
    (
      exists(UseTree tree, Path path, ItemPath ip |
        tree = use.getUseTree() and
        path = tree.getPath() and
        ip = resolvePath(path) and
        getAnItemPath(use) = usePath and // TItemPathCons(_, usePath) and
        not exists(tree.getUseTreeList()) and
        // todo: handle `getUseTreeList`
        exists(Item i |
          ip = getAnItemPath(i) and
          if i instanceof Module
          then usedPath = TItemPathCons(head, ip)
          else (
            usedPath = ip and
            head = i
          )
        )
      )
      or
      exists(ItemPath usePathMid, Item mid, ItemPath usedPathMid |
        useImport(use, usePathMid, mid, usedPathMid) and
        usePath = TItemPathCons(mid, usePathMid) and
        usedPath = TItemPathCons(head, usedPathMid)
      )
    )
  }
  // /** A crate. */
  // class Crate extends File {
  //   Crate() { this.getBaseName() = "Cargo.toml" }
  //   pragma[nomagic]
  //   Item getItem() {
  //     exists(SourceFile file |
  //       file.getFile().getParentContainer() = this.getParentContainer() and
  //       file.getAnItem() = result
  //     )
  //   }
  // }
}
